   //  root --- denotes root of the created tree and node_to_find is the node whose cousins have to be found
   
   vector<int> printCousins(Node* root, Node* node_to_find)
    {
        //code here
         vector<int> ans;
       queue<Node*> q;
       q.push(root);
       
       bool found = false;
       while(!q.empty() && !found)
       {
           int size = q.size();
           
           while(size--)
           {
               Node* temp = q.front();
               q.pop();
               
               if(temp->left == node_to_find || temp->right == node_to_find)
                   found = true;
               else
               {
                   if(temp->left)
                       q.push(temp->left);
                   
                   if(temp->right)
                       q.push(temp->right);
               }
           }
       }
       
       if(!q.empty())
       {
           while(!q.empty())
           {
               ans.push_back(q.front()->data);
               q.pop();
           }
       }
       else
           ans.push_back(-1);
   
       return ans;
    }
